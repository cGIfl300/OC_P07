LIMITED TEST TO 5 ACTION BUYING CHAIN MAXIMIM DUE TO THE EXPONENTIAL TIME REQUIERED

       #!/bin/bash venv python3
    1: import csv
    1: from itertools import permutations
       
    1: budget_max = 500  # Budget maximum
    1: actions_dict = {}
    1: actions_dict_percentile = {}
    1: actions_list = []
    1: prices_list = []
    1: process_list = []
    1: combination_best = 0
    1: bonus_global = 0
    1: bonus_best = 0
    1: actions_max = 0
    1: count_combinations = 0
       
       
    1: def import_csv(filename):
           # Import a CSV, return a table
    1:     every_action = []
    1:     with open(filename, encoding="utf-8", newline="") as csvfile:
    1:         reader = csv.DictReader(csvfile, quotechar="%")
   21:         for row in reader:
   20:             every_action.append(row)
    1:     return every_action
       
       
    1: def total_combination(this_combination):
           # calculate the total result of a set of actions (cost + bonus)
           # big_O = 1
           global budget_max
1984028:     cost = 0
11772925:     for this_action in this_combination:
9788897:         cost += int(actions_dict[this_action])
9788897:         if cost > budget_max:
                   return None
1984028:     return cost
       
       
    1: def bonus_combination(this_combination):
           # calculate the bonus of an actions set
           # big_O = 1 + len(this_combination)
1984028:     bonus = 0
11772925:     for this_action in this_combination:
19577794:         bonus += int(actions_dict[this_action]) * (
9788897:             int(actions_dict_percentile[this_action]) / 100
               )
1984028:     return bonus
       
       
    1: actions = import_csv("data/actions.csv")
       
   21: for action in actions:
   20:     actions_list.append(action["action"])
   20:     actions_dict[action["action"]] = int(action["price"])
   20:     actions_dict_percentile[action["action"]] = int(action["percentile"])
       
   21: for action in actions:
   20:     prices_list.append(action["price"])
       
       # Find the cheapest actions to determinate the maximum number of action
       # that can be buy
    1: prices_list.sort()
       
    1: budget = 0
    1: elements = 0
       
   15: for el in prices_list:
   15:     budget += int(prices_list[elements])
   15:     if budget < budget_max:
   14:         elements += 1
           else:
    1:         break
       
    1: actions_max = elements + 1
       # From this point big_O = 159
       
       # Here is the heart of bruteforce, trying every combination
    6: for combination_length in range(1, 6):
    5:     combination = permutations(actions_list, combination_length)
    5:     print(f"New range: {combination_length} / {actions_max}")
1984005:     for el in combination:
1984000:         count_combinations += 1
1984000:         if total_combination(el):
1984000:             bonus_global = bonus_combination(el)
1984000:             if bonus_global > bonus_best:
   28:                 combination_best = list(el)
   28:                 bonus_best = bonus_global
   56:                 print(
   84:                     f"--- Combination {count_combinations} ---\n{el}\n"
                           f"Can be buy for "
   28:                     f"{total_combination(combination_best)} "
                           f"and generate a bonus of "
   28:                     f"{bonus_combination(combination_best)}"
                       )
       # Total big_O = 243_290_200_000_000_000_159 (Maximum big_O for 20 actions)
       # big_O = len(actions_list) + 161 + exp(len(actions)) (is exponential)

Time tracing is not possible due to the amount of data (exponential) tracing for only a 2 action buying chain.

 --- modulename: bruteforce, funcname: <module>
0.00 bruteforce.py(2): import csv
 --- modulename: _bootstrap, funcname: _find_and_load
0.00 <frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__
0.00 <frozen importlib._bootstrap>(153): 0.00 <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__
0.00 <frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock
0.00 <frozen importlib._bootstrap>(172): 0.00 <frozen importlib._bootstrap>(173): 0.00 <frozen importlib._bootstrap>(174): 0.00 <frozen importlib._bootstrap>(175): 0.00 <frozen importlib._bootstrap>(176): 0.00 <frozen importlib._bootstrap>(177): 0.00 <frozen importlib._bootstrap>(179): 0.00 <frozen importlib._bootstrap>(180): 0.00 <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__
0.00 <frozen importlib._bootstrap>(59): 0.00 <frozen importlib._bootstrap>(60): 0.00 <frozen importlib._bootstrap>(61): 0.00 <frozen importlib._bootstrap>(62): 0.00 <frozen importlib._bootstrap>(63): 0.00 <frozen importlib._bootstrap>(64): 0.00 <frozen importlib._bootstrap>(185): 0.00 <frozen importlib._bootstrap>(196): 0.00 <frozen importlib._bootstrap>(198): 0.00 <frozen importlib._bootstrap>(200): 0.00 <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire
0.00 <frozen importlib._bootstrap>(93): 0.00 <frozen importlib._bootstrap>(94): 0.00 <frozen importlib._bootstrap>(95): 0.00 <frozen importlib._bootstrap>(97): 0.00 <frozen importlib._bootstrap>(98): 0.00 <frozen importlib._bootstrap>(99): 0.00 <frozen importlib._bootstrap>(100): 0.00 <frozen importlib._bootstrap>(101): 0.00 <frozen importlib._bootstrap>(110): 0.00 <frozen importlib._bootstrap>(101): 0.00 <frozen importlib._bootstrap>(1005): 0.00 <frozen importlib._bootstrap>(1006): 0.00 <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
0.00 <frozen importlib._bootstrap>(968): 0.00 <frozen importlib._bootstrap>(969): 0.00 <frozen importlib._bootstrap>(970): 0.00 <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec
0.00 <frozen importlib._bootstrap>(903): 0.00 <frozen importlib._bootstrap>(904): 0.00 <frozen importlib._bootstrap>(909): 0.00 <frozen importlib._bootstrap>(915): 0.00 <frozen importlib._bootstrap>(916): 0.00 <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__
0.00 <frozen importlib._bootstrap>(876): 0.00 <frozen importlib._bootstrap>(918): 0.00 <frozen importlib._bootstrap>(919): 0.00 <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec
0.00 <frozen importlib._bootstrap>(738): 0.00 <frozen importlib._bootstrap>(740): 0.00 <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__
0.00 <frozen importlib._bootstrap>(880): 0.00 <frozen importlib._bootstrap>(926): 0.00 <frozen importlib._bootstrap>(916): 0.00 <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__
0.00 <frozen importlib._bootstrap>(876): 0.00 <frozen importlib._bootstrap>(918): 0.00 <frozen importlib._bootstrap>(919): 0.00 <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec
0.00 <frozen importlib._bootstrap>(813): 0.00 <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__
0.00 <frozen importlib._bootstrap>(880): 0.00 <frozen importlib._bootstrap>(926): 0.00 <frozen importlib._bootstrap>(916): 0.00 <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__
0.00 <frozen importlib._bootstrap>(876): 0.00 <frozen importlib._bootstrap>(918): 0.00 <frozen importlib._bootstrap>(919): 0.00 <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec
0.00 <frozen importlib._bootstrap_external>(1347): 0.00 <frozen importlib._bootstrap_external>(1348): 0.00 <frozen importlib._bootstrap_external>(1349):  --- modulename: _bootstrap_external, funcname: _get_spec
0.00 <frozen importlib._bootstrap_external>(1314): 0.00 <frozen importlib._bootstrap_external>(1315): 0.00 <frozen importlib._bootstrap_external>(1316): 0.00 <frozen importlib._bootstrap_external>(1318):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
0.00 <frozen importlib._bootstrap_external>(1280): 0.00 <frozen importlib._bootstrap_external>(1287): 0.00 <frozen importlib._bootstrap_external>(1288): 0.00 <frozen importlib._bootstrap_external>(1289): 0.00 <frozen importlib._bootstrap_external>(1290):  --- modulename: _bootstrap_external, funcname: _path_hooks
0.00 <frozen importlib._bootstrap_external>(1262): 0.00 <frozen importlib._bootstrap_external>(1264): 0.00 <frozen importlib._bootstrap_external>(1265): 0.00 <frozen importlib._bootstrap_external>(1266):  --- modulename: _bootstrap_external, funcname: _path_stat
0.00 <frozen importlib._bootstrap_external>(87): 0.00 <frozen importlib._bootstrap_external>(1267): 0.00 <frozen importlib._bootstrap_external>(1268): 0.00 <frozen importlib._bootstrap_external>(1264): 0.00 <frozen importlib._bootstrap_external>(1265): 0.00 <frozen importlib._bootstrap_external>(1266):  --- modulename: _bootstrap_external, funcname: path_hook_for_FileFinder
0.00 <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _path_isdir
0.00 <frozen importlib._bootstrap_external>(106): 0.00 <frozen importlib._bootstrap_external>(108):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
0.00 <frozen importlib._bootstrap_external>(92): 0.00 <frozen importlib._bootstrap_external>(93):  --- modulename: _bootstrap_external, funcname: _path_stat
0.00 <frozen importlib._bootstrap_external>(87): 0.00 <frozen importlib._bootstrap_external>(96): 0.00 <frozen importlib._bootstrap_external>(1531):  --- modulename: _bootstrap_external, funcname: __init__
0.00 <frozen importlib._bootstrap_external>(1405): 0.00 <frozen importlib._bootstrap_external>(1406): 0.00 <frozen importlib._bootstrap_external>(1407):  --- modulename: _bootstrap_external, funcname: <genexpr>
0.00 <frozen importlib._bootstrap_external>(1407):  --- modulename: _bootstrap_external, funcname: <genexpr>
0.00 <frozen importlib._bootstrap_external>(1407):  --- modulename: _bootstrap_external, funcname: <genexpr>
0.00 <frozen importlib._bootstrap_external>(1407): 0.00 <frozen importlib._bootstrap_external>(1406): 0.00 <frozen importlib._bootstrap_external>(1407):  --- modulename: _bootstrap_external, funcname: <genexpr>
0.00 <frozen importlib._bootstrap_external>(1407):  --- modulename: _bootstrap_external, funcname: <genexpr>
0.00 <frozen importlib._bootstrap_external>(1407):  --- modulename: _bootstrap_external, funcname: <genexpr>
0.00 <frozen importlib._bootstrap_external>(1407): 0.00 <frozen importlib._bootstrap_external>(1406): 0.00 <frozen importlib._bootstrap_external>(1407):  --- modulename: _bootstrap_external, funcname: <genexpr>
0.00 <frozen importlib._bootstrap_external>(1407):  --- modulename: _bootstrap_external, funcname: <genexpr>
0.00 <frozen importlib._bootstrap_external>(1407): 0.00 <frozen importlib._bootstrap_external>(1406): 0.00 <frozen importlib._bootstrap_external>(1408): 0.00 <frozen importlib._bootstrap_external>(1410): 0.00 <frozen importlib._bootstrap_external>(1411): 0.00 <frozen importlib._bootstrap_external>(1412): 0.00 <frozen importlib._bootstrap_external>(1413): 0.00 <frozen importlib._bootstrap_external>(1291): 0.00 <frozen importlib._bootstrap_external>(1292): 0.00 <frozen importlib._bootstrap_external>(1319): 0.00 <frozen importlib._bootstrap_external>(1320): 0.00 <frozen importlib._bootstrap_external>(1321):  --- modulename: _bootstrap_external, funcname: find_spec
0.00 <frozen importlib._bootstrap_external>(1443): 0.00 <frozen importlib._bootstrap_external>(1444): 0.00 <frozen importlib._bootstrap_external>(1445): 0.00 <frozen importlib._bootstrap_external>(1446):  --- modulename: _bootstrap_external, funcname: _path_stat
0.00 <frozen importlib._bootstrap_external>(87): 0.00 <frozen importlib._bootstrap_external>(1449): 0.00 <frozen importlib._bootstrap_external>(1450):  --- modulename: _bootstrap_external, funcname: _fill_cache
0.00 <frozen importlib._bootstrap_external>(1488): 0.00 <frozen importlib._bootstrap_external>(1489): 0.00 <frozen importlib._bootstrap_external>(1490): 0.00 <frozen importlib._bootstrap_external>(1497): 0.00 <frozen importlib._bootstrap_external>(1505): 0.00 <frozen importlib._bootstrap_external>(1506): 0.00 <frozen importlib._bootstrap_external>(1507): 0.00 <frozen importlib._bootstrap_external>(1508): 0.00 <frozen importlib._bootstrap_external>(1509): 0.00 <frozen importlib._bootstrap_external>(1512): 0.00 <frozen importlib._bootstrap_external>(1506): 0.00 <frozen importlib._bootstrap_external>(1507): 0.00 <frozen importlib._bootstrap_external>(1508): 0.00 <frozen importlib._bootstrap_external>(1509): 0.00 <frozen importlib._bootstrap_external>(1512): 0.00 <frozen importlib._bootstrap_external>(1506): 0.00 <frozen importlib._bootstrap_external>(1507): 0.00 <frozen importlib._bootstrap_external>(1508): 0.00 <frozen importlib._bootstrap_external>(1509): 0.00 <frozen importlib._bootstrap_external>(1512): 0.00 <frozen importlib._bootstrap_external>(1506): 0.00 <frozen importlib._bootstrap_external>(1507): 0.00 <frozen importlib._bootstrap_external>(1508): 0.00 <frozen importlib._bootstrap_external>(1509): 0.00 <frozen importlib._bootstrap_external>(1512): 0.00 <frozen importlib._bootstrap_external>(1506): 0.00 <frozen importlib._bootstrap_external>(1507): 0.00 <frozen importlib._bootstrap_external>(1508): 0.00 <frozen importlib._bootstrap_external>(1509): 0.00 <frozen importlib._bootstrap_external>(1512): 0.00 <frozen importlib._bootstrap_external>(1506): 0.00 <frozen importlib._bootstrap_external>(1507): 0.00 <frozen importlib._bootstrap_external>(1508): 0.00 <frozen importlib._bootstrap_external>(1509): 0.00 <frozen importlib._bootstrap_external>(1512): 0.00 <frozen importlib._bootstrap_external>(1506): 0.00 <frozen importlib._bootstrap_external>(1507): 0.00 <frozen importlib._bootstrap_external>(1508): 0.00 <frozen importlib._bootstrap_external>(1511): 0.00 <frozen importlib._bootstrap_external>(1512): 0.00 <frozen importlib._bootstrap_external>(1506): 0.00 <frozen importlib._bootstrap_external>(1507): 0.00 <frozen importlib._bootstrap_external>(1508): 0.00 <frozen importlib._bootstrap_external>(1511): 0.00 <frozen importlib._bootstrap_external>(1512): 0.00 <frozen importlib._bootstrap_external>(1506): 0.00 <frozen importlib._bootstrap_external>(1507): 0.00 <frozen importlib._bootstrap_external>(1508): 0.00 <frozen importlib._bootstrap_external>(1509): 0.00 <frozen importlib._bootstrap_external>(1512): 0.00 <frozen importlib._bootstrap_external>(1506): 0.00 <frozen importlib._bootstrap_external>(1507): 0.00 <frozen importlib._bootstrap_external>(1508): 0.00 <frozen importlib._bootstrap_external>(1509): 0.00 <frozen importlib._bootstrap_external>(1512): 0.00 <frozen importlib._bootstrap_external>(1506): 0.00 <frozen importlib._bootstrap_external>(1507): 0.00 <frozen importlib._bootstrap_external>(1508): 0.00 <frozen importlib._bootstrap_external>(1509): 0.00 <frozen importlib._bootstrap_external>(1512): 0.00 <frozen importlib._bootstrap_external>(1506): 0.00 <frozen importlib._bootstrap_external>(1507): 0.00 <frozen importlib._bootstrap_external>(1508): 0.00 <frozen importlib._bootstrap_external>(1509): 0.00 <frozen importlib._bootstrap_external>(1512): 0.00 <frozen importlib._bootstrap_external>(1506): 0.00 <frozen importlib._bootstrap_external>(1513): 0.00 <frozen importlib._bootstrap_external>(1514): 0.00 <frozen importlib._bootstrap_external>(1515):  --- modulename: _bootstrap_external, funcname: <setcomp>
0.00 <frozen importlib._bootstrap_external>(1515): 0.00 <frozen importlib._bootstrap_external>(1515): 0.00 <frozen importlib._bootstrap_external>(1515): 0.00 <frozen importlib._bootstrap_external>(1515): 0.00 <frozen importlib._bootstrap_external>(1515): 0.00 <frozen importlib._bootstrap_external>(1515): 0.00 <frozen importlib._bootstrap_external>(1515): 0.00 <frozen importlib._bootstrap_external>(1515): 0.00 <frozen importlib._bootstrap_external>(1515): 0.00 <frozen importlib._bootstrap_external>(1515): 0.00 <frozen importlib._bootstrap_external>(1515): 0.00 <frozen importlib._bootstrap_external>(1515): 0.00 <frozen importlib._bootstrap_external>(1515): 0.00 <frozen importlib._bootstrap_external>(1451): 0.00 <frozen importlib._bootstrap_external>(1453):  --- modulename: _bootstrap_external, funcname: _relax_case
0.00 <frozen importlib._bootstrap_external>(38): 0.00 <frozen importlib._bootstrap_external>(1457): 0.00 <frozen importlib._bootstrap_external>(1458): 0.00 <frozen importlib._bootstrap_external>(1460): 0.00 <frozen importlib._bootstrap_external>(1472): 0.00 <frozen importlib._bootstrap_external>(1473):  --- modulename: _bootstrap_external, funcname: _path_join
0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(65): 0.00 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(1474):  --- modulename: _bootstrap, funcname: _verbose_message
0.00 <frozen importlib._bootstrap>(233): 0.00 <frozen importlib._bootstrap_external>(1475): 0.00 <frozen importlib._bootstrap_external>(1472): 0.00 <frozen importlib._bootstrap_external>(1473):  --- modulename: _bootstrap_external, funcname: _path_join
0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(65): 0.00 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(1474):  --- modulename: _bootstrap, funcname: _verbose_message
0.00 <frozen importlib._bootstrap>(233): 0.00 <frozen importlib._bootstrap_external>(1475): 0.00 <frozen importlib._bootstrap_external>(1472): 0.00 <frozen importlib._bootstrap_external>(1473):  --- modulename: _bootstrap_external, funcname: _path_join
0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(65): 0.00 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(1474):  --- modulename: _bootstrap, funcname: _verbose_message
0.00 <frozen importlib._bootstrap>(233): 0.00 <frozen importlib._bootstrap_external>(1475): 0.00 <frozen importlib._bootstrap_external>(1472): 0.00 <frozen importlib._bootstrap_external>(1473):  --- modulename: _bootstrap_external, funcname: _path_join
0.00 <frozen importlib._bootstrap_external>(64): 0.00 <frozen importlib._bootstrap_external>(65): 0.00 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(1474):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap_external>(1475): 0.02 <frozen importlib._bootstrap_external>(1472): 0.02 <frozen importlib._bootstrap_external>(1473):  --- modulename: _bootstrap_external, funcname: _path_join
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(65): 0.02 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(1474):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap_external>(1475): 0.02 <frozen importlib._bootstrap_external>(1472): 0.02 <frozen importlib._bootstrap_external>(1479): 0.02 <frozen importlib._bootstrap_external>(1484): 0.02 <frozen importlib._bootstrap_external>(1324): 0.02 <frozen importlib._bootstrap_external>(1325): 0.02 <frozen importlib._bootstrap_external>(1315): 0.02 <frozen importlib._bootstrap_external>(1316): 0.02 <frozen importlib._bootstrap_external>(1318):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
0.02 <frozen importlib._bootstrap_external>(1280): 0.02 <frozen importlib._bootstrap_external>(1287): 0.02 <frozen importlib._bootstrap_external>(1288): 0.02 <frozen importlib._bootstrap_external>(1292): 0.02 <frozen importlib._bootstrap_external>(1319): 0.02 <frozen importlib._bootstrap_external>(1315): 0.02 <frozen importlib._bootstrap_external>(1316): 0.02 <frozen importlib._bootstrap_external>(1318):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
0.02 <frozen importlib._bootstrap_external>(1280): 0.02 <frozen importlib._bootstrap_external>(1287): 0.02 <frozen importlib._bootstrap_external>(1288): 0.02 <frozen importlib._bootstrap_external>(1292): 0.02 <frozen importlib._bootstrap_external>(1319): 0.02 <frozen importlib._bootstrap_external>(1320): 0.02 <frozen importlib._bootstrap_external>(1321):  --- modulename: _bootstrap_external, funcname: find_spec
0.02 <frozen importlib._bootstrap_external>(1443): 0.02 <frozen importlib._bootstrap_external>(1444): 0.02 <frozen importlib._bootstrap_external>(1445): 0.02 <frozen importlib._bootstrap_external>(1446):  --- modulename: _bootstrap_external, funcname: _path_stat
0.02 <frozen importlib._bootstrap_external>(87): 0.02 <frozen importlib._bootstrap_external>(1449): 0.02 <frozen importlib._bootstrap_external>(1453):  --- modulename: _bootstrap_external, funcname: _relax_case
0.02 <frozen importlib._bootstrap_external>(38): 0.02 <frozen importlib._bootstrap_external>(1457): 0.02 <frozen importlib._bootstrap_external>(1458): 0.02 <frozen importlib._bootstrap_external>(1460): 0.02 <frozen importlib._bootstrap_external>(1472): 0.02 <frozen importlib._bootstrap_external>(1473):  --- modulename: _bootstrap_external, funcname: _path_join
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(65): 0.02 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(1474):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap_external>(1475): 0.02 <frozen importlib._bootstrap_external>(1472): 0.02 <frozen importlib._bootstrap_external>(1473):  --- modulename: _bootstrap_external, funcname: _path_join
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(65): 0.02 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(1474):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap_external>(1475): 0.02 <frozen importlib._bootstrap_external>(1472): 0.02 <frozen importlib._bootstrap_external>(1473):  --- modulename: _bootstrap_external, funcname: _path_join
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(65): 0.02 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(1474):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap_external>(1475): 0.02 <frozen importlib._bootstrap_external>(1472): 0.02 <frozen importlib._bootstrap_external>(1473):  --- modulename: _bootstrap_external, funcname: _path_join
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(65): 0.02 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(1474):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap_external>(1475): 0.02 <frozen importlib._bootstrap_external>(1472): 0.02 <frozen importlib._bootstrap_external>(1473):  --- modulename: _bootstrap_external, funcname: _path_join
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(65): 0.02 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(1474):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap_external>(1475): 0.02 <frozen importlib._bootstrap_external>(1472): 0.02 <frozen importlib._bootstrap_external>(1479): 0.02 <frozen importlib._bootstrap_external>(1484): 0.02 <frozen importlib._bootstrap_external>(1324): 0.02 <frozen importlib._bootstrap_external>(1325): 0.02 <frozen importlib._bootstrap_external>(1315): 0.02 <frozen importlib._bootstrap_external>(1316): 0.02 <frozen importlib._bootstrap_external>(1318):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
0.02 <frozen importlib._bootstrap_external>(1280): 0.02 <frozen importlib._bootstrap_external>(1287): 0.02 <frozen importlib._bootstrap_external>(1288): 0.02 <frozen importlib._bootstrap_external>(1292): 0.02 <frozen importlib._bootstrap_external>(1319): 0.02 <frozen importlib._bootstrap_external>(1320): 0.02 <frozen importlib._bootstrap_external>(1321):  --- modulename: _bootstrap_external, funcname: find_spec
0.02 <frozen importlib._bootstrap_external>(1443): 0.02 <frozen importlib._bootstrap_external>(1444): 0.02 <frozen importlib._bootstrap_external>(1445): 0.02 <frozen importlib._bootstrap_external>(1446):  --- modulename: _bootstrap_external, funcname: _path_stat
0.02 <frozen importlib._bootstrap_external>(87): 0.02 <frozen importlib._bootstrap_external>(1449): 0.02 <frozen importlib._bootstrap_external>(1453):  --- modulename: _bootstrap_external, funcname: _relax_case
0.02 <frozen importlib._bootstrap_external>(38): 0.02 <frozen importlib._bootstrap_external>(1457): 0.02 <frozen importlib._bootstrap_external>(1458): 0.02 <frozen importlib._bootstrap_external>(1460): 0.02 <frozen importlib._bootstrap_external>(1472): 0.02 <frozen importlib._bootstrap_external>(1473):  --- modulename: _bootstrap_external, funcname: _path_join
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(65): 0.02 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(1474):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap_external>(1475): 0.02 <frozen importlib._bootstrap_external>(1472): 0.02 <frozen importlib._bootstrap_external>(1473):  --- modulename: _bootstrap_external, funcname: _path_join
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(65): 0.02 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(1474):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap_external>(1475): 0.02 <frozen importlib._bootstrap_external>(1472): 0.02 <frozen importlib._bootstrap_external>(1473):  --- modulename: _bootstrap_external, funcname: _path_join
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(65): 0.02 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(1474):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap_external>(1475): 0.02 <frozen importlib._bootstrap_external>(1476):  --- modulename: _bootstrap_external, funcname: _path_isfile
0.02 <frozen importlib._bootstrap_external>(101):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
0.02 <frozen importlib._bootstrap_external>(92): 0.02 <frozen importlib._bootstrap_external>(93):  --- modulename: _bootstrap_external, funcname: _path_stat
0.02 <frozen importlib._bootstrap_external>(87): 0.02 <frozen importlib._bootstrap_external>(96): 0.02 <frozen importlib._bootstrap_external>(1477): 0.02 <frozen importlib._bootstrap_external>(1478): 0.02 <frozen importlib._bootstrap_external>(1477):  --- modulename: _bootstrap_external, funcname: _get_spec
0.02 <frozen importlib._bootstrap_external>(1434):  --- modulename: _bootstrap_external, funcname: __init__
0.02 <frozen importlib._bootstrap_external>(949): 0.02 <frozen importlib._bootstrap_external>(950): 0.02 <frozen importlib._bootstrap_external>(1435): 0.02 <frozen importlib._bootstrap_external>(1436): 0.02 <frozen importlib._bootstrap_external>(1435):  --- modulename: _bootstrap_external, funcname: spec_from_file_location
0.02 <frozen importlib._bootstrap_external>(648): 0.02 <frozen importlib._bootstrap_external>(660): 0.02 <frozen importlib._bootstrap_external>(668):  --- modulename: _bootstrap, funcname: __init__
0.02 <frozen importlib._bootstrap>(353): 0.02 <frozen importlib._bootstrap>(354): 0.02 <frozen importlib._bootstrap>(355): 0.02 <frozen importlib._bootstrap>(356): 0.02 <frozen importlib._bootstrap>(357): 0.02 <frozen importlib._bootstrap>(360): 0.02 <frozen importlib._bootstrap>(361): 0.02 <frozen importlib._bootstrap_external>(669): 0.02 <frozen importlib._bootstrap_external>(672): 0.02 <frozen importlib._bootstrap_external>(682): 0.02 <frozen importlib._bootstrap_external>(693): 0.02 <frozen importlib._bootstrap_external>(694): 0.02 <frozen importlib._bootstrap_external>(699): 0.02 <frozen importlib._bootstrap_external>(1324): 0.02 <frozen importlib._bootstrap_external>(1326): 0.02 <frozen importlib._bootstrap_external>(1327): 0.02 <frozen importlib._bootstrap_external>(1350): 0.02 <frozen importlib._bootstrap_external>(1352): 0.02 <frozen importlib._bootstrap_external>(1363):  --- modulename: _bootstrap, funcname: __exit__
0.02 <frozen importlib._bootstrap>(880): 0.02 <frozen importlib._bootstrap>(926): 0.02 <frozen importlib._bootstrap>(928): 0.02 <frozen importlib._bootstrap>(943): 0.02 <frozen importlib._bootstrap>(983): 0.02 <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked
0.02 <frozen importlib._bootstrap>(661): 0.02 <frozen importlib._bootstrap>(663): 0.02 <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec
0.02 <frozen importlib._bootstrap>(561): 0.02 <frozen importlib._bootstrap>(562): 0.02 <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module
0.02 <frozen importlib._bootstrap_external>(782): 0.02 <frozen importlib._bootstrap>(569): 0.02 <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module
0.02 <frozen importlib._bootstrap>(36): 0.02 <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs
0.02 <frozen importlib._bootstrap>(490): 0.02 <frozen importlib._bootstrap>(496): 0.02 <frozen importlib._bootstrap>(497): 0.02 <frozen importlib._bootstrap>(498): 0.02 <frozen importlib._bootstrap>(519): 0.02 <frozen importlib._bootstrap>(520): 0.02 <frozen importlib._bootstrap>(524): 0.02 <frozen importlib._bootstrap>(525): 0.02 <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent
0.02 <frozen importlib._bootstrap>(401): 0.02 <frozen importlib._bootstrap>(402): 0.02 <frozen importlib._bootstrap>(530): 0.02 <frozen importlib._bootstrap>(531): 0.02 <frozen importlib._bootstrap>(535): 0.02 <frozen importlib._bootstrap>(536): 0.02 <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location
0.02 <frozen importlib._bootstrap>(408): 0.02 <frozen importlib._bootstrap>(543): 0.02 <frozen importlib._bootstrap>(544): 0.02 <frozen importlib._bootstrap>(545): 0.02 <frozen importlib._bootstrap>(549): 0.02 <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached
0.02 <frozen importlib._bootstrap>(387): 0.02 <frozen importlib._bootstrap>(388): 0.02 <frozen importlib._bootstrap>(389): 0.02 <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached
0.02 <frozen importlib._bootstrap_external>(432): 0.02 <frozen importlib._bootstrap_external>(433): 0.02 <frozen importlib._bootstrap_external>(434):  --- modulename: _bootstrap_external, funcname: cache_from_source
0.02 <frozen importlib._bootstrap_external>(319): 0.02 <frozen importlib._bootstrap_external>(326): 0.02 <frozen importlib._bootstrap_external>(327):  --- modulename: _bootstrap_external, funcname: _path_split
0.02 <frozen importlib._bootstrap_external>(70): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(75): 0.02 <frozen importlib._bootstrap_external>(76): 0.02 <frozen importlib._bootstrap_external>(328): 0.02 <frozen importlib._bootstrap_external>(329): 0.02 <frozen importlib._bootstrap_external>(330): 0.02 <frozen importlib._bootstrap_external>(332): 0.02 <frozen importlib._bootstrap_external>(333): 0.02 <frozen importlib._bootstrap_external>(334): 0.02 <frozen importlib._bootstrap_external>(335): 0.02 <frozen importlib._bootstrap_external>(338): 0.02 <frozen importlib._bootstrap_external>(339): 0.02 <frozen importlib._bootstrap_external>(343): 0.02 <frozen importlib._bootstrap_external>(344): 0.02 <frozen importlib._bootstrap_external>(369):  --- modulename: _bootstrap_external, funcname: _path_join
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(65): 0.02 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap>(392): 0.02 <frozen importlib._bootstrap>(551): 0.02 <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached
0.02 <frozen importlib._bootstrap>(387): 0.02 <frozen importlib._bootstrap>(392): 0.02 <frozen importlib._bootstrap>(555): 0.02 <frozen importlib._bootstrap>(572): 0.02 <frozen importlib._bootstrap>(671): 0.02 <frozen importlib._bootstrap>(672): 0.02 <frozen importlib._bootstrap>(673): 0.02 <frozen importlib._bootstrap>(674): 0.02 <frozen importlib._bootstrap>(675): 0.02 <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module
0.02 <frozen importlib._bootstrap_external>(786):  --- modulename: _bootstrap_external, funcname: get_code
0.02 <frozen importlib._bootstrap_external>(863):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper
0.02 <frozen importlib._bootstrap_external>(464): 0.02 <frozen importlib._bootstrap_external>(466): 0.02 <frozen importlib._bootstrap_external>(469):  --- modulename: _bootstrap_external, funcname: get_filename
0.02 <frozen importlib._bootstrap_external>(974): 0.02 <frozen importlib._bootstrap_external>(864): 0.02 <frozen importlib._bootstrap_external>(865): 0.02 <frozen importlib._bootstrap_external>(866): 0.02 <frozen importlib._bootstrap_external>(867): 0.02 <frozen importlib._bootstrap_external>(868): 0.02 <frozen importlib._bootstrap_external>(869): 0.02 <frozen importlib._bootstrap_external>(870):  --- modulename: _bootstrap_external, funcname: cache_from_source
0.02 <frozen importlib._bootstrap_external>(319): 0.02 <frozen importlib._bootstrap_external>(326): 0.02 <frozen importlib._bootstrap_external>(327):  --- modulename: _bootstrap_external, funcname: _path_split
0.02 <frozen importlib._bootstrap_external>(70): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(73): 0.02 <frozen importlib._bootstrap_external>(74): 0.02 <frozen importlib._bootstrap_external>(75): 0.02 <frozen importlib._bootstrap_external>(76): 0.02 <frozen importlib._bootstrap_external>(328): 0.02 <frozen importlib._bootstrap_external>(329): 0.02 <frozen importlib._bootstrap_external>(330): 0.02 <frozen importlib._bootstrap_external>(332): 0.02 <frozen importlib._bootstrap_external>(333): 0.02 <frozen importlib._bootstrap_external>(334): 0.02 <frozen importlib._bootstrap_external>(335): 0.02 <frozen importlib._bootstrap_external>(338): 0.02 <frozen importlib._bootstrap_external>(339): 0.02 <frozen importlib._bootstrap_external>(343): 0.02 <frozen importlib._bootstrap_external>(344): 0.02 <frozen importlib._bootstrap_external>(369):  --- modulename: _bootstrap_external, funcname: _path_join
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(65): 0.02 <frozen importlib._bootstrap_external>(64):  --- modulename: _bootstrap_external, funcname: <listcomp>
0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(64): 0.02 <frozen importlib._bootstrap_external>(874): 0.02 <frozen importlib._bootstrap_external>(875):  --- modulename: _bootstrap_external, funcname: path_stats
0.02 <frozen importlib._bootstrap_external>(1019):  --- modulename: _bootstrap_external, funcname: _path_stat
0.02 <frozen importlib._bootstrap_external>(87): 0.02 <frozen importlib._bootstrap_external>(1020): 0.02 <frozen importlib._bootstrap_external>(879): 0.02 <frozen importlib._bootstrap_external>(880): 0.02 <frozen importlib._bootstrap_external>(881):  --- modulename: _bootstrap_external, funcname: get_data
0.02 <frozen importlib._bootstrap_external>(978): 0.02 <frozen importlib._bootstrap_external>(979): 0.02 <frozen importlib._bootstrap_external>(980): 0.02 <frozen importlib._bootstrap_external>(886): 0.02 <frozen importlib._bootstrap_external>(887): 0.02 <frozen importlib._bootstrap_external>(885): 0.02 <frozen importlib._bootstrap_external>(889): 0.02 <frozen importlib._bootstrap_external>(890):  --- modulename: _bootstrap_external, funcname: _classify_pyc
0.02 <frozen importlib._bootstrap_external>(516): 0.02 <frozen importlib._bootstrap_external>(517): 0.02 <frozen importlib._bootstrap_external>(521): 0.02 <frozen importlib._bootstrap_external>(525):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
0.02 <frozen importlib._bootstrap_external>(53): 0.02 <frozen importlib._bootstrap_external>(54): 0.02 <frozen importlib._bootstrap_external>(527): 0.02 <frozen importlib._bootstrap_external>(530): 0.02 <frozen importlib._bootstrap_external>(891): 0.02 <frozen importlib._bootstrap_external>(892): 0.02 <frozen importlib._bootstrap_external>(893): 0.02 <frozen importlib._bootstrap_external>(906): 0.02 <frozen importlib._bootstrap_external>(907): 0.02 <frozen importlib._bootstrap_external>(908): 0.02 <frozen importlib._bootstrap_external>(909): 0.02 <frozen importlib._bootstrap_external>(910): 0.02 <frozen importlib._bootstrap_external>(911): 0.02 <frozen importlib._bootstrap_external>(906):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc
0.02 <frozen importlib._bootstrap_external>(552):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
0.02 <frozen importlib._bootstrap_external>(53): 0.02 <frozen importlib._bootstrap_external>(54): 0.02 <frozen importlib._bootstrap_external>(556): 0.02 <frozen importlib._bootstrap_external>(557):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
0.02 <frozen importlib._bootstrap_external>(53): 0.02 <frozen importlib._bootstrap_external>(54): 0.02 <frozen importlib._bootstrap_external>(916): 0.02 <frozen importlib._bootstrap_external>(917): 0.02 <frozen importlib._bootstrap_external>(916):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap_external>(918): 0.02 <frozen importlib._bootstrap_external>(919): 0.02 <frozen importlib._bootstrap_external>(920): 0.02 <frozen importlib._bootstrap_external>(918):  --- modulename: _bootstrap_external, funcname: _compile_bytecode
0.02 <frozen importlib._bootstrap_external>(587): 0.02 <frozen importlib._bootstrap_external>(588): 0.02 <frozen importlib._bootstrap_external>(589):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap_external>(590): 0.02 <frozen importlib._bootstrap_external>(591): 0.02 <frozen importlib._bootstrap_external>(592): 0.02 <frozen importlib._bootstrap_external>(787): 0.02 <frozen importlib._bootstrap_external>(790):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
0.02 <frozen importlib._bootstrap>(228):  --- modulename: csv, funcname: <module>
0.02 csv.py(2): """
0.02 csv.py(6): import re
0.02 csv.py(7): from _csv import Error, __version__, writer, reader, register_dialect, \
 --- modulename: _bootstrap, funcname: _find_and_load
0.02 <frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__
0.02 <frozen importlib._bootstrap>(153): 0.02 <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__
0.02 <frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock
0.02 <frozen importlib._bootstrap>(172): 0.02 <frozen importlib._bootstrap>(173): 0.02 <frozen importlib._bootstrap>(174): 0.02 <frozen importlib._bootstrap>(175): 0.02 <frozen importlib._bootstrap>(176): 0.02 <frozen importlib._bootstrap>(177): 0.02 <frozen importlib._bootstrap>(179): 0.02 <frozen importlib._bootstrap>(180): 0.02 <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__
0.02 <frozen importlib._bootstrap>(59): 0.02 <frozen importlib._bootstrap>(60): 0.02 <frozen importlib._bootstrap>(61): 0.02 <frozen importlib._bootstrap>(62): 0.02 <frozen importlib._bootstrap>(63): 0.02 <frozen importlib._bootstrap>(64): 0.02 <frozen importlib._bootstrap>(185): 0.02 <frozen importlib._bootstrap>(196): 0.02 <frozen importlib._bootstrap>(198): 0.02 <frozen importlib._bootstrap>(200): 0.02 <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire
0.02 <frozen importlib._bootstrap>(93): 0.02 <frozen importlib._bootstrap>(94): 0.02 <frozen importlib._bootstrap>(95): 0.02 <frozen importlib._bootstrap>(97): 0.02 <frozen importlib._bootstrap>(98): 0.02 <frozen importlib._bootstrap>(99): 0.02 <frozen importlib._bootstrap>(100): 0.02 <frozen importlib._bootstrap>(101): 0.02 <frozen importlib._bootstrap>(110): 0.02 <frozen importlib._bootstrap>(101): 0.02 <frozen importlib._bootstrap>(1005): 0.02 <frozen importlib._bootstrap>(1006): 0.02 <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
0.02 <frozen importlib._bootstrap>(968): 0.02 <frozen importlib._bootstrap>(969): 0.02 <frozen importlib._bootstrap>(970): 0.02 <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec
0.02 <frozen importlib._bootstrap>(903): 0.02 <frozen importlib._bootstrap>(904): 0.02 <frozen importlib._bootstrap>(909): 0.02 <frozen importlib._bootstrap>(915): 0.02 <frozen importlib._bootstrap>(916): 0.02 <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__
0.02 <frozen importlib._bootstrap>(876): 0.02 <frozen importlib._bootstrap>(918): 0.02 <frozen importlib._bootstrap>(919): 0.02 <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec
0.02 <frozen importlib._bootstrap>(738): 0.02 <frozen importlib._bootstrap>(740): 0.02 <frozen importlib._bootstrap>(741):  --- modulename: _bootstrap, funcname: spec_from_loader
0.02 <frozen importlib._bootstrap>(417): 0.02 <frozen importlib._bootstrap>(428): 0.02 <frozen importlib._bootstrap>(429): 0.02 <frozen importlib._bootstrap>(430): 0.02 <frozen importlib._bootstrap>(431):  --- modulename: _bootstrap, funcname: _requires_builtin_wrapper
0.02 <frozen importlib._bootstrap>(242): 0.02 <frozen importlib._bootstrap>(245):  --- modulename: _bootstrap, funcname: is_package
0.02 <frozen importlib._bootstrap>(786): 0.02 <frozen importlib._bootstrap>(438):  --- modulename: _bootstrap, funcname: __init__
0.02 <frozen importlib._bootstrap>(353): 0.02 <frozen importlib._bootstrap>(354): 0.02 <frozen importlib._bootstrap>(355): 0.02 <frozen importlib._bootstrap>(356): 0.02 <frozen importlib._bootstrap>(357): 0.02 <frozen importlib._bootstrap>(360): 0.02 <frozen importlib._bootstrap>(361):  --- modulename: _bootstrap, funcname: __exit__
0.02 <frozen importlib._bootstrap>(880): 0.02 <frozen importlib._bootstrap>(926): 0.02 <frozen importlib._bootstrap>(928): 0.02 <frozen importlib._bootstrap>(943): 0.02 <frozen importlib._bootstrap>(983): 0.02 <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked
0.02 <frozen importlib._bootstrap>(661): 0.02 <frozen importlib._bootstrap>(663): 0.02 <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec
0.02 <frozen importlib._bootstrap>(561): 0.02 <frozen importlib._bootstrap>(562): 0.02 <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap, funcname: create_module
0.02 <frozen importlib._bootstrap>(760): 0.02 <frozen importlib._bootstrap>(763):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
0.02 <frozen importlib._bootstrap>(228): 0.02 <frozen importlib._bootstrap>(569): 0.02 <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs
0.02 <frozen importlib._bootstrap>(490): 0.02 <frozen importlib._bootstrap>(496): 0.02 <frozen importlib._bootstrap>(497): 0.02 <frozen importlib._bootstrap>(498): 0.02 <frozen importlib._bootstrap>(519): 0.02 <frozen importlib._bootstrap>(520): 0.02 <frozen importlib._bootstrap>(524): 0.02 <frozen importlib._bootstrap>(525): 0.02 <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent
0.02 <frozen importlib._bootstrap>(401): 0.02 <frozen importlib._bootstrap>(402): 0.02 <frozen importlib._bootstrap>(530): 0.02 <frozen importlib._bootstrap>(531): 0.02 <frozen importlib._bootstrap>(535): 0.02 <frozen importlib._bootstrap>(536): 0.02 <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location
0.02 <frozen importlib._bootstrap>(408): 0.02 <frozen importlib._bootstrap>(555): 0.02 <frozen importlib._bootstrap>(572): 0.02 <frozen importlib._bootstrap>(671): 0.02 <frozen importlib._bootstrap>(672): 0.02 <frozen importlib._bootstrap>(673): 0.02 <frozen importlib._bootstrap>(674): 0.02 <frozen importlib._bootstrap>(675): 0.02 <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap, funcname: exec_module
0.02 <frozen importlib._bootstrap>(768):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
0.02 <frozen importlib._bootstrap>(228): 0.02 <frozen importlib._bootstrap>(691): 0.02 <frozen importlib._bootstrap>(692): 0.02 <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap>(695): 0.02 <frozen importlib._bootstrap>(697): 0.02 <frozen importlib._bootstrap>(987): 0.02 <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__
0.02 <frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release
0.02 <frozen importlib._bootstrap>(113): 0.02 <frozen importlib._bootstrap>(114): 0.02 <frozen importlib._bootstrap>(115): 0.02 <frozen importlib._bootstrap>(117): 0.02 <frozen importlib._bootstrap>(118): 0.02 <frozen importlib._bootstrap>(119): 0.02 <frozen importlib._bootstrap>(120): 0.02 <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb
0.02 <frozen importlib._bootstrap>(186): 0.02 <frozen importlib._bootstrap>(187): 0.02 <frozen importlib._bootstrap>(191): 0.02 <frozen importlib._bootstrap>(192): 0.02 <frozen importlib._bootstrap>(194): 0.02 csv.py(12): from _csv import Dialect as _Dialect
0.02 csv.py(14): from io import StringIO
0.02 csv.py(16): __all__ = ["QUOTE_MINIMAL", "QUOTE_ALL", "QUOTE_NONNUMERIC", "QUOTE_NONE",
0.02 csv.py(23): class Dialect:
 --- modulename: csv, funcname: Dialect
0.02 csv.py(23): class Dialect:
0.02 csv.py(24):     """Describe a CSV dialect.
0.02 csv.py(31):     _name = ""
0.02 csv.py(32):     _valid = False
0.02 csv.py(34):     delimiter = None
0.02 csv.py(35):     quotechar = None
0.02 csv.py(36):     escapechar = None
0.02 csv.py(37):     doublequote = None
0.02 csv.py(38):     skipinitialspace = None
0.02 csv.py(39):     lineterminator = None
0.02 csv.py(40):     quoting = None
0.02 csv.py(42):     def __init__(self):
0.02 csv.py(47):     def _validate(self):
0.02 csv.py(54): class excel(Dialect):
 --- modulename: csv, funcname: excel
0.02 csv.py(54): class excel(Dialect):
0.02 csv.py(55):     """Describe the usual properties of Excel-generated CSV files."""
0.02 csv.py(56):     delimiter = ','
0.02 csv.py(57):     quotechar = '"'
0.02 csv.py(58):     doublequote = True
0.02 csv.py(59):     skipinitialspace = False
0.02 csv.py(60):     lineterminator = '\r\n'
0.02 csv.py(61):     quoting = QUOTE_MINIMAL
0.02 csv.py(62): register_dialect("excel", excel)
0.02 csv.py(64): class excel_tab(excel):
 --- modulename: csv, funcname: excel_tab
0.02 csv.py(64): class excel_tab(excel):
0.02 csv.py(65):     """Describe the usual properties of Excel-generated TAB-delimited files."""
0.02 csv.py(66):     delimiter = '\t'
0.02 csv.py(67): register_dialect("excel-tab", excel_tab)
0.02 csv.py(69): class unix_dialect(Dialect):
 --- modulename: csv, funcname: unix_dialect
0.02 csv.py(69): class unix_dialect(Dialect):
0.02 csv.py(70):     """Describe the usual properties of Unix-generated CSV files."""
0.02 csv.py(71):     delimiter = ','
0.02 csv.py(72):     quotechar = '"'
0.02 csv.py(73):     doublequote = True
0.02 csv.py(74):     skipinitialspace = False
0.02 csv.py(75):     lineterminator = '\n'
0.02 csv.py(76):     quoting = QUOTE_ALL
0.02 csv.py(77): register_dialect("unix", unix_dialect)
0.02 csv.py(80): class DictReader:
 --- modulename: csv, funcname: DictReader
0.02 csv.py(80): class DictReader:
0.02 csv.py(81):     def __init__(self, f, fieldnames=None, restkey=None, restval=None,
0.02 csv.py(90):     def __iter__(self):
0.02 csv.py(93):     @property
0.02 csv.py(94):     def fieldnames(self):
0.02 csv.py(103):     @fieldnames.setter
0.02 csv.py(104):     def fieldnames(self, value):
0.02 csv.py(107):     def __next__(self):
0.02 csv.py(130): class DictWriter:
 --- modulename: csv, funcname: DictWriter
0.02 csv.py(130): class DictWriter:
0.02 csv.py(131):     def __init__(self, f, fieldnames, restval="", extrasaction="raise",
0.02 csv.py(141):     def writeheader(self):
0.02 csv.py(145):     def _dict_to_list(self, rowdict):
0.02 csv.py(153):     def writerow(self, rowdict):
0.02 csv.py(156):     def writerows(self, rowdicts):
0.02 csv.py(160): try:
0.02 csv.py(161):     complex
0.02 csv.py(165): class Sniffer:
 --- modulename: csv, funcname: Sniffer
0.02 csv.py(165): class Sniffer:
0.02 csv.py(166):     '''
0.02 csv.py(170):     def __init__(self):
0.02 csv.py(175):     def sniff(self, sample, delimiters=None):
0.02 csv.py(204):     def _guess_quote_and_delimiter(self, data, delimiters):
0.02 csv.py(280):     def _guess_delimiter(self, data, delimiters):
0.02 csv.py(383):     def has_header(self, sample):
0.02 <frozen importlib._bootstrap>(691): 0.02 <frozen importlib._bootstrap>(692): 0.02 <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message
0.02 <frozen importlib._bootstrap>(233): 0.02 <frozen importlib._bootstrap>(695): 0.02 <frozen importlib._bootstrap>(697): 0.02 <frozen importlib._bootstrap>(987): 0.02 <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__
0.02 <frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release
0.02 <frozen importlib._bootstrap>(113): 0.02 <frozen importlib._bootstrap>(114): 0.02 <frozen importlib._bootstrap>(115): 0.02 <frozen importlib._bootstrap>(117): 0.02 <frozen importlib._bootstrap>(118): 0.02 <frozen importlib._bootstrap>(119): 0.02 <frozen importlib._bootstrap>(120): 0.02 <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb
0.02 <frozen importlib._bootstrap>(186): 0.02 <frozen importlib._bootstrap>(187): 0.02 <frozen importlib._bootstrap>(191): 0.02 <frozen importlib._bootstrap>(192): 0.02 <frozen importlib._bootstrap>(194): 0.02 bruteforce.py(3): from itertools import permutations
0.02 bruteforce.py(5): budget_max = 500  # Budget maximum
0.02 bruteforce.py(6): actions_dict = {}
0.02 bruteforce.py(7): actions_dict_percentile = {}
0.02 bruteforce.py(8): actions_list = []
0.02 bruteforce.py(9): prices_list = []
0.02 bruteforce.py(10): process_list = []
0.02 bruteforce.py(11): combination_best = 0
0.02 bruteforce.py(12): bonus_global = 0
0.02 bruteforce.py(13): bonus_best = 0
0.02 bruteforce.py(14): actions_max = 0
0.02 bruteforce.py(15): count_combinations = 0
0.02 bruteforce.py(18): def import_csv(filename):
0.02 bruteforce.py(28): def total_combination(this_combination):
0.02 bruteforce.py(40): def bonus_combination(this_combination):
0.02 bruteforce.py(51): actions = import_csv("data/actions.csv")
 --- modulename: bruteforce, funcname: import_csv
0.02 bruteforce.py(20):     every_action = []
0.02 bruteforce.py(21):     with open(filename, encoding="utf-8", newline="") as csvfile:
 --- modulename: codecs, funcname: __init__
0.02 codecs.py(310):         IncrementalDecoder.__init__(self, errors)
 --- modulename: codecs, funcname: __init__
0.02 codecs.py(268):         self.errors = errors
0.02 codecs.py(312):         self.buffer = b""
0.02 bruteforce.py(22):         reader = csv.DictReader(csvfile, quotechar="%")
 --- modulename: csv, funcname: __init__
0.02 csv.py(83):         self._fieldnames = fieldnames   # list of keys for the dict
0.02 csv.py(84):         self.restkey = restkey          # key to catch long rows
0.02 csv.py(85):         self.restval = restval          # default value for short rows
0.02 csv.py(86):         self.reader = reader(f, dialect, *args, **kwds)
0.02 csv.py(87):         self.dialect = dialect
0.02 csv.py(88):         self.line_num = 0
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __iter__
0.02 csv.py(91):         return self
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(110):             self.fieldnames
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(96):             try:
0.02 csv.py(97):                 self._fieldnames = next(self.reader)
 --- modulename: codecs, funcname: decode
0.02 codecs.py(321):         data = self.buffer + input
0.02 codecs.py(322):         (result, consumed) = self._buffer_decode(data, self.errors, final)
0.02 codecs.py(324):         self.buffer = data[consumed:]
0.02 codecs.py(325):         return result
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
 --- modulename: codecs, funcname: decode
0.02 codecs.py(321):         data = self.buffer + input
0.02 codecs.py(322):         (result, consumed) = self._buffer_decode(data, self.errors, final)
0.02 codecs.py(324):         self.buffer = data[consumed:]
0.02 codecs.py(325):         return result
0.02 csv.py(112):         self.line_num = self.reader.line_num
0.02 csv.py(117):         while row == []:
0.02 csv.py(119):         d = dict(zip(self.fieldnames, row))
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(120):         lf = len(self.fieldnames)
 --- modulename: csv, funcname: fieldnames
0.02 csv.py(95):         if self._fieldnames is None:
0.02 csv.py(100):         self.line_num = self.reader.line_num
0.02 csv.py(101):         return self._fieldnames
0.02 csv.py(121):         lr = len(row)
0.02 csv.py(122):         if lf < lr:
0.02 csv.py(124):         elif lf > lr:
0.02 csv.py(127):         return d
0.02 bruteforce.py(24):             every_action.append(row)
0.02 bruteforce.py(23):         for row in reader:
 --- modulename: csv, funcname: __next__
0.02 csv.py(108):         if self.line_num == 0:
0.02 csv.py(111):         row = next(self.reader)
 --- modulename: codecs, funcname: decode
0.02 codecs.py(321):         data = self.buffer + input
0.02 codecs.py(322):         (result, consumed) = self._buffer_decode(data, self.errors, final)
0.02 codecs.py(324):         self.buffer = data[consumed:]
0.02 codecs.py(325):         return result
0.02 bruteforce.py(25):     return every_action
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(54):     actions_list.append(action["action"])
0.02 bruteforce.py(55):     actions_dict[action["action"]] = int(action["price"])
0.02 bruteforce.py(56):     actions_dict_percentile[action["action"]] = int(action["percentile"])
0.02 bruteforce.py(53): for action in actions:
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(59):     prices_list.append(action["price"])
0.02 bruteforce.py(58): for action in actions:
0.02 bruteforce.py(63): prices_list.sort()
0.02 bruteforce.py(65): budget = 0
0.02 bruteforce.py(66): elements = 0
0.02 bruteforce.py(68): for el in prices_list:
0.02 bruteforce.py(69):     budget += int(prices_list[elements])
0.02 bruteforce.py(70):     if budget < budget_max:
0.02 bruteforce.py(71):         elements += 1
0.02 bruteforce.py(68): for el in prices_list:
0.02 bruteforce.py(69):     budget += int(prices_list[elements])
0.02 bruteforce.py(70):     if budget < budget_max:
0.02 bruteforce.py(71):         elements += 1
0.02 bruteforce.py(68): for el in prices_list:
0.02 bruteforce.py(69):     budget += int(prices_list[elements])
0.02 bruteforce.py(70):     if budget < budget_max:
0.02 bruteforce.py(71):         elements += 1
0.02 bruteforce.py(68): for el in prices_list:
0.02 bruteforce.py(69):     budget += int(prices_list[elements])
0.02 bruteforce.py(70):     if budget < budget_max:
0.02 bruteforce.py(71):         elements += 1
0.02 bruteforce.py(68): for el in prices_list:
0.02 bruteforce.py(69):     budget += int(prices_list[elements])
0.02 bruteforce.py(70):     if budget < budget_max:
0.02 bruteforce.py(71):         elements += 1
0.02 bruteforce.py(68): for el in prices_list:
0.02 bruteforce.py(69):     budget += int(prices_list[elements])
0.03 bruteforce.py(70):     if budget < budget_max:
0.03 bruteforce.py(71):         elements += 1
0.03 bruteforce.py(68): for el in prices_list:
0.03 bruteforce.py(69):     budget += int(prices_list[elements])
0.03 bruteforce.py(70):     if budget < budget_max:
0.03 bruteforce.py(71):         elements += 1
0.03 bruteforce.py(68): for el in prices_list:
0.03 bruteforce.py(69):     budget += int(prices_list[elements])
0.03 bruteforce.py(70):     if budget < budget_max:
0.03 bruteforce.py(71):         elements += 1
0.03 bruteforce.py(68): for el in prices_list:
0.03 bruteforce.py(69):     budget += int(prices_list[elements])
0.03 bruteforce.py(70):     if budget < budget_max:
0.03 bruteforce.py(71):         elements += 1
0.03 bruteforce.py(68): for el in prices_list:
0.03 bruteforce.py(69):     budget += int(prices_list[elements])
0.03 bruteforce.py(70):     if budget < budget_max:
0.03 bruteforce.py(71):         elements += 1
0.03 bruteforce.py(68): for el in prices_list:
0.03 bruteforce.py(69):     budget += int(prices_list[elements])
0.03 bruteforce.py(70):     if budget < budget_max:
0.03 bruteforce.py(71):         elements += 1
0.03 bruteforce.py(68): for el in prices_list:
0.03 bruteforce.py(69):     budget += int(prices_list[elements])
0.03 bruteforce.py(70):     if budget < budget_max:
0.03 bruteforce.py(71):         elements += 1
0.03 bruteforce.py(68): for el in prices_list:
0.03 bruteforce.py(69):     budget += int(prices_list[elements])
0.03 bruteforce.py(70):     if budget < budget_max:
0.03 bruteforce.py(71):         elements += 1
0.03 bruteforce.py(68): for el in prices_list:
0.03 bruteforce.py(69):     budget += int(prices_list[elements])
0.03 bruteforce.py(70):     if budget < budget_max:
0.03 bruteforce.py(71):         elements += 1
0.03 bruteforce.py(68): for el in prices_list:
0.03 bruteforce.py(69):     budget += int(prices_list[elements])
0.03 bruteforce.py(70):     if budget < budget_max:
0.03 bruteforce.py(73):         break
0.03 bruteforce.py(75): actions_max = elements + 1
0.03 bruteforce.py(79): for combination_length in range(1, 3):
0.03 bruteforce.py(80):     combination = permutations(actions_list, combination_length)
0.03 bruteforce.py(81):     print(f"New range: {combination_length} / {actions_max}")
 --- modulename: cp1252, funcname: encode
0.03 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
New range: 1 / 15 --- modulename: cp1252, funcname: encode
0.03 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(87):                 combination_best = list(el)
0.03 bruteforce.py(88):                 bonus_best = bonus_global
0.03 bruteforce.py(89):                 print(
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.03 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 1 ---
('Action-1',)
Can be buy for 20 and generate a bonus of 1.0 --- modulename: cp1252, funcname: encode
0.03 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(87):                 combination_best = list(el)
0.03 bruteforce.py(88):                 bonus_best = bonus_global
0.03 bruteforce.py(89):                 print(
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.03 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 2 ---
('Action-2',)
Can be buy for 30 and generate a bonus of 3.0 --- modulename: cp1252, funcname: encode
0.03 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(87):                 combination_best = list(el)
0.03 bruteforce.py(88):                 bonus_best = bonus_global
0.03 bruteforce.py(89):                 print(
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.03 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 3 ---
('Action-3',)
Can be buy for 50 and generate a bonus of 7.5 --- modulename: cp1252, funcname: encode
0.03 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(87):                 combination_best = list(el)
0.03 bruteforce.py(88):                 bonus_best = bonus_global
0.03 bruteforce.py(89):                 print(
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.03 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 4 ---
('Action-4',)
Can be buy for 70 and generate a bonus of 14.0 --- modulename: cp1252, funcname: encode
0.03 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(87):                 combination_best = list(el)
0.03 bruteforce.py(88):                 bonus_best = bonus_global
0.03 bruteforce.py(89):                 print(
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.03 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.03 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 6 ---
('Action-6',)
Can be buy for 80 and generate a bonus of 20.0 --- modulename: cp1252, funcname: encode
0.03 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.03 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.03 bruteforce.py(32):     cost = 0
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.03 bruteforce.py(35):         if cost > budget_max:
0.03 bruteforce.py(33):     for this_action in this_combination:
0.03 bruteforce.py(37):     return cost
0.03 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.03 bruteforce.py(43):     bonus = 0
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.03 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.03 bruteforce.py(44):     for this_action in this_combination:
0.03 bruteforce.py(48):     return bonus
0.03 bruteforce.py(86):             if bonus_global > bonus_best:
0.03 bruteforce.py(82):     for el in combination:
0.03 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(86):             if bonus_global > bonus_best:
0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(86):             if bonus_global > bonus_best:
0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(86):             if bonus_global > bonus_best:
0.05 bruteforce.py(87):                 combination_best = list(el)
0.05 bruteforce.py(88):                 bonus_best = bonus_global
0.05 bruteforce.py(89):                 print(
0.05 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.05 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.05 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.05 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.05 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 20 ---
('Action-20',)
Can be buy for 114 and generate a bonus of 20.52 --- modulename: cp1252, funcname: encode
0.05 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(79): for combination_length in range(1, 3):
0.05 bruteforce.py(80):     combination = permutations(actions_list, combination_length)
0.05 bruteforce.py(81):     print(f"New range: {combination_length} / {actions_max}")
 --- modulename: cp1252, funcname: encode
0.05 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
New range: 2 / 15 --- modulename: cp1252, funcname: encode
0.05 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(86):             if bonus_global > bonus_best:
0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(86):             if bonus_global > bonus_best:
0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(86):             if bonus_global > bonus_best:
0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(86):             if bonus_global > bonus_best:
0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(86):             if bonus_global > bonus_best:
0.05 bruteforce.py(87):                 combination_best = list(el)
0.05 bruteforce.py(88):                 bonus_best = bonus_global
0.05 bruteforce.py(89):                 print(
0.05 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.05 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.05 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.05 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.05 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 25 ---
('Action-1', 'Action-6')
Can be buy for 100 and generate a bonus of 21.0 --- modulename: cp1252, funcname: encode
0.05 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(86):             if bonus_global > bonus_best:
0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(86):             if bonus_global > bonus_best:
0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(86):             if bonus_global > bonus_best:
0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(86):             if bonus_global > bonus_best:
0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(37):     return cost
0.05 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.05 bruteforce.py(43):     bonus = 0
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.05 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.05 bruteforce.py(44):     for this_action in this_combination:
0.05 bruteforce.py(48):     return bonus
0.05 bruteforce.py(86):             if bonus_global > bonus_best:
0.05 bruteforce.py(82):     for el in combination:
0.05 bruteforce.py(83):         count_combinations += 1
0.05 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.05 bruteforce.py(32):     cost = 0
0.05 bruteforce.py(33):     for this_action in this_combination:
0.05 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.05 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(87):                 combination_best = list(el)
0.06 bruteforce.py(88):                 bonus_best = bonus_global
0.06 bruteforce.py(89):                 print(
0.06 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.06 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.06 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.06 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.06 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 39 ---
('Action-1', 'Action-20')
Can be buy for 134 and generate a bonus of 21.52 --- modulename: cp1252, funcname: encode
0.06 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(87):                 combination_best = list(el)
0.06 bruteforce.py(88):                 bonus_best = bonus_global
0.06 bruteforce.py(89):                 print(
0.06 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.06 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.06 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.06 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.06 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 44 ---
('Action-2', 'Action-6')
Can be buy for 110 and generate a bonus of 23.0 --- modulename: cp1252, funcname: encode
0.06 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.06 bruteforce.py(35):         if cost > budget_max:
0.06 bruteforce.py(33):     for this_action in this_combination:
0.06 bruteforce.py(37):     return cost
0.06 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.06 bruteforce.py(43):     bonus = 0
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.06 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.06 bruteforce.py(44):     for this_action in this_combination:
0.06 bruteforce.py(48):     return bonus
0.06 bruteforce.py(86):             if bonus_global > bonus_best:
0.06 bruteforce.py(82):     for el in combination:
0.06 bruteforce.py(83):         count_combinations += 1
0.06 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.06 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(87):                 combination_best = list(el)
0.08 bruteforce.py(88):                 bonus_best = bonus_global
0.08 bruteforce.py(89):                 print(
0.08 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.08 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.08 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.08 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.08 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 58 ---
('Action-2', 'Action-20')
Can be buy for 144 and generate a bonus of 23.52 --- modulename: cp1252, funcname: encode
0.08 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(87):                 combination_best = list(el)
0.08 bruteforce.py(88):                 bonus_best = bonus_global
0.08 bruteforce.py(89):                 print(
0.08 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.08 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.08 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.08 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.08 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 63 ---
('Action-3', 'Action-6')
Can be buy for 130 and generate a bonus of 27.5 --- modulename: cp1252, funcname: encode
0.08 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.08 bruteforce.py(32):     cost = 0
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.08 bruteforce.py(35):         if cost > budget_max:
0.08 bruteforce.py(33):     for this_action in this_combination:
0.08 bruteforce.py(37):     return cost
0.08 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.08 bruteforce.py(43):     bonus = 0
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.08 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.08 bruteforce.py(44):     for this_action in this_combination:
0.08 bruteforce.py(48):     return bonus
0.08 bruteforce.py(86):             if bonus_global > bonus_best:
0.08 bruteforce.py(82):     for el in combination:
0.08 bruteforce.py(83):         count_combinations += 1
0.08 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(87):                 combination_best = list(el)
0.09 bruteforce.py(88):                 bonus_best = bonus_global
0.09 bruteforce.py(89):                 print(
0.09 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.09 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.09 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.09 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.09 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 77 ---
('Action-3', 'Action-20')
Can be buy for 164 and generate a bonus of 28.02 --- modulename: cp1252, funcname: encode
0.09 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(87):                 combination_best = list(el)
0.09 bruteforce.py(88):                 bonus_best = bonus_global
0.09 bruteforce.py(89):                 print(
0.09 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.09 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.09 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.09 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.09 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 82 ---
('Action-4', 'Action-6')
Can be buy for 150 and generate a bonus of 34.0 --- modulename: cp1252, funcname: encode
0.09 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.09 bruteforce.py(35):         if cost > budget_max:
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(37):     return cost
0.09 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.09 bruteforce.py(43):     bonus = 0
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.09 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.09 bruteforce.py(44):     for this_action in this_combination:
0.09 bruteforce.py(48):     return bonus
0.09 bruteforce.py(86):             if bonus_global > bonus_best:
0.09 bruteforce.py(82):     for el in combination:
0.09 bruteforce.py(83):         count_combinations += 1
0.09 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.09 bruteforce.py(32):     cost = 0
0.09 bruteforce.py(33):     for this_action in this_combination:
0.09 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(87):                 combination_best = list(el)
0.11 bruteforce.py(88):                 bonus_best = bonus_global
0.11 bruteforce.py(89):                 print(
0.11 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.11 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.11 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.11 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.11 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 96 ---
('Action-4', 'Action-20')
Can be buy for 184 and generate a bonus of 34.519999999999996 --- modulename: cp1252, funcname: encode
0.11 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(48):     return bonus
0.11 bruteforce.py(86):             if bonus_global > bonus_best:
0.11 bruteforce.py(82):     for el in combination:
0.11 bruteforce.py(83):         count_combinations += 1
0.11 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.11 bruteforce.py(32):     cost = 0
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.11 bruteforce.py(35):         if cost > budget_max:
0.11 bruteforce.py(33):     for this_action in this_combination:
0.11 bruteforce.py(37):     return cost
0.11 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.11 bruteforce.py(43):     bonus = 0
0.11 bruteforce.py(44):     for this_action in this_combination:
0.11 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(48):     return bonus
0.12 bruteforce.py(86):             if bonus_global > bonus_best:
0.12 bruteforce.py(82):     for el in combination:
0.12 bruteforce.py(83):         count_combinations += 1
0.12 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.12 bruteforce.py(32):     cost = 0
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.12 bruteforce.py(35):         if cost > budget_max:
0.12 bruteforce.py(33):     for this_action in this_combination:
0.12 bruteforce.py(37):     return cost
0.12 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.12 bruteforce.py(43):     bonus = 0
0.12 bruteforce.py(44):     for this_action in this_combination:
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.12 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.12 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(87):                 combination_best = list(el)
0.14 bruteforce.py(88):                 bonus_best = bonus_global
0.14 bruteforce.py(89):                 print(
0.14 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.14 bruteforce.py(92):                     f"{total_combination(combination_best)} "
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.14 bruteforce.py(94):                     f"{bonus_combination(combination_best)}"
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(90):                     f"--- Combination {count_combinations} ---\n{el}\n"
0.14 bruteforce.py(89):                 print(
 --- modulename: cp1252, funcname: encode
0.14 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]
--- Combination 134 ---
('Action-6', 'Action-20')
Can be buy for 194 and generate a bonus of 40.519999999999996 --- modulename: cp1252, funcname: encode
0.14 cp1252.py(19):         return codecs.charmap_encode(input,self.errors,encoding_table)[0]

0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.14 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.14 bruteforce.py(32):     cost = 0
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.14 bruteforce.py(35):         if cost > budget_max:
0.14 bruteforce.py(33):     for this_action in this_combination:
0.14 bruteforce.py(37):     return cost
0.14 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.14 bruteforce.py(43):     bonus = 0
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.14 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.14 bruteforce.py(44):     for this_action in this_combination:
0.14 bruteforce.py(48):     return bonus
0.14 bruteforce.py(86):             if bonus_global > bonus_best:
0.14 bruteforce.py(82):     for el in combination:
0.14 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.16 bruteforce.py(35):         if cost > budget_max:
0.16 bruteforce.py(33):     for this_action in this_combination:
0.16 bruteforce.py(37):     return cost
0.16 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.16 bruteforce.py(43):     bonus = 0
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.16 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.16 bruteforce.py(44):     for this_action in this_combination:
0.16 bruteforce.py(48):     return bonus
0.16 bruteforce.py(86):             if bonus_global > bonus_best:
0.16 bruteforce.py(82):     for el in combination:
0.16 bruteforce.py(83):         count_combinations += 1
0.16 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.16 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.17 bruteforce.py(82):     for el in combination:
0.17 bruteforce.py(83):         count_combinations += 1
0.17 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.17 bruteforce.py(32):     cost = 0
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.17 bruteforce.py(35):         if cost > budget_max:
0.17 bruteforce.py(33):     for this_action in this_combination:
0.17 bruteforce.py(37):     return cost
0.17 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.17 bruteforce.py(43):     bonus = 0
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.17 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.17 bruteforce.py(44):     for this_action in this_combination:
0.17 bruteforce.py(48):     return bonus
0.17 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.19 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.19 bruteforce.py(32):     cost = 0
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.19 bruteforce.py(35):         if cost > budget_max:
0.19 bruteforce.py(33):     for this_action in this_combination:
0.19 bruteforce.py(37):     return cost
0.19 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.19 bruteforce.py(43):     bonus = 0
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.19 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.19 bruteforce.py(44):     for this_action in this_combination:
0.19 bruteforce.py(48):     return bonus
0.19 bruteforce.py(86):             if bonus_global > bonus_best:
0.19 bruteforce.py(82):     for el in combination:
0.19 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(48):     return bonus
0.20 bruteforce.py(86):             if bonus_global > bonus_best:
0.20 bruteforce.py(82):     for el in combination:
0.20 bruteforce.py(83):         count_combinations += 1
0.20 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.20 bruteforce.py(32):     cost = 0
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.20 bruteforce.py(35):         if cost > budget_max:
0.20 bruteforce.py(33):     for this_action in this_combination:
0.20 bruteforce.py(37):     return cost
0.20 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.20 bruteforce.py(43):     bonus = 0
0.20 bruteforce.py(44):     for this_action in this_combination:
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.20 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.20 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.22 bruteforce.py(82):     for el in combination:
0.22 bruteforce.py(83):         count_combinations += 1
0.22 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.22 bruteforce.py(32):     cost = 0
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.22 bruteforce.py(35):         if cost > budget_max:
0.22 bruteforce.py(33):     for this_action in this_combination:
0.22 bruteforce.py(37):     return cost
0.22 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.22 bruteforce.py(43):     bonus = 0
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.22 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.22 bruteforce.py(44):     for this_action in this_combination:
0.22 bruteforce.py(48):     return bonus
0.22 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.23 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.23 bruteforce.py(32):     cost = 0
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.23 bruteforce.py(35):         if cost > budget_max:
0.23 bruteforce.py(33):     for this_action in this_combination:
0.23 bruteforce.py(37):     return cost
0.23 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.23 bruteforce.py(43):     bonus = 0
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.23 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.23 bruteforce.py(44):     for this_action in this_combination:
0.23 bruteforce.py(48):     return bonus
0.23 bruteforce.py(86):             if bonus_global > bonus_best:
0.23 bruteforce.py(82):     for el in combination:
0.23 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.25 bruteforce.py(35):         if cost > budget_max:
0.25 bruteforce.py(33):     for this_action in this_combination:
0.25 bruteforce.py(37):     return cost
0.25 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.25 bruteforce.py(43):     bonus = 0
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.25 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.25 bruteforce.py(44):     for this_action in this_combination:
0.25 bruteforce.py(48):     return bonus
0.25 bruteforce.py(86):             if bonus_global > bonus_best:
0.25 bruteforce.py(82):     for el in combination:
0.25 bruteforce.py(83):         count_combinations += 1
0.25 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.25 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.27 bruteforce.py(82):     for el in combination:
0.27 bruteforce.py(83):         count_combinations += 1
0.27 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.27 bruteforce.py(32):     cost = 0
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.27 bruteforce.py(35):         if cost > budget_max:
0.27 bruteforce.py(33):     for this_action in this_combination:
0.27 bruteforce.py(37):     return cost
0.27 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.27 bruteforce.py(43):     bonus = 0
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.27 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.27 bruteforce.py(44):     for this_action in this_combination:
0.27 bruteforce.py(48):     return bonus
0.27 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(48):     return bonus
0.28 bruteforce.py(86):             if bonus_global > bonus_best:
0.28 bruteforce.py(82):     for el in combination:
0.28 bruteforce.py(83):         count_combinations += 1
0.28 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.28 bruteforce.py(32):     cost = 0
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.28 bruteforce.py(35):         if cost > budget_max:
0.28 bruteforce.py(33):     for this_action in this_combination:
0.28 bruteforce.py(37):     return cost
0.28 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.28 bruteforce.py(43):     bonus = 0
0.28 bruteforce.py(44):     for this_action in this_combination:
0.28 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(48):     return bonus
0.30 bruteforce.py(86):             if bonus_global > bonus_best:
0.30 bruteforce.py(82):     for el in combination:
0.30 bruteforce.py(83):         count_combinations += 1
0.30 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.30 bruteforce.py(32):     cost = 0
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.30 bruteforce.py(35):         if cost > budget_max:
0.30 bruteforce.py(33):     for this_action in this_combination:
0.30 bruteforce.py(37):     return cost
0.30 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.30 bruteforce.py(43):     bonus = 0
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.30 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.30 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.31 bruteforce.py(82):     for el in combination:
0.31 bruteforce.py(83):         count_combinations += 1
0.31 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.31 bruteforce.py(32):     cost = 0
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.31 bruteforce.py(35):         if cost > budget_max:
0.31 bruteforce.py(33):     for this_action in this_combination:
0.31 bruteforce.py(37):     return cost
0.31 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.31 bruteforce.py(43):     bonus = 0
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.31 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.31 bruteforce.py(44):     for this_action in this_combination:
0.31 bruteforce.py(48):     return bonus
0.31 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(83):         count_combinations += 1
0.33 bruteforce.py(84):         if total_combination(el):
 --- modulename: bruteforce, funcname: total_combination
0.33 bruteforce.py(32):     cost = 0
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(34):         cost += int(actions_dict[this_action])
0.33 bruteforce.py(35):         if cost > budget_max:
0.33 bruteforce.py(33):     for this_action in this_combination:
0.33 bruteforce.py(37):     return cost
0.33 bruteforce.py(85):             bonus_global = bonus_combination(el)
 --- modulename: bruteforce, funcname: bonus_combination
0.33 bruteforce.py(43):     bonus = 0
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(46):             int(actions_dict_percentile[this_action]) / 100
0.33 bruteforce.py(45):         bonus += int(actions_dict[this_action]) * (
0.33 bruteforce.py(44):     for this_action in this_combination:
0.33 bruteforce.py(48):     return bonus
0.33 bruteforce.py(86):             if bonus_global > bonus_best:
0.33 bruteforce.py(82):     for el in combination:
0.33 bruteforce.py(79): for combination_length in range(1, 3):
lines   cov%   module   (path)
   62   100%   bruteforce   (d:/src/OC_P07/bruteforce.py)
    7   100%   codecs   (D:\Program Files\Python39\lib\codecs.py)
    1   100%   cp1252   (D:\Program Files\Python39\lib\encodings\cp1252.py)
   87   100%   csv   (D:\Program Files\Python39\lib\csv.py)


 Immediatly turns to more than 6 seconds with a buying chain of 3 actions.